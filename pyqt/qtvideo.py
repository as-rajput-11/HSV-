# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'b.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import cv2
import numpy as np
from itertools import count
from operator import index
from cv2 import waitKey
import torch
import cv2
import numpy as np
import time
import pandas  as pd


def nothing():
    pass


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(206, 159)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(50, 10, 111, 25))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.imageshow)


        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(50, 40, 111, 25))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.playvideo)


        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(50, 70, 111, 25))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.detection)




        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 206, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    
    def playvideo(self):
        h = cv2.VideoCapture("/home/bisag/MASK/HHTImask/HHTI_MASK_YOLO/D8dog1.avi")
        while True:
            ret,frame = h.read()
            cv2.imshow("hello",frame)
          
            if cv2.waitKey(10) & 0xFF == ord('q'):
                break
        h.release()
        cv2.destroyAllWindows()

    def imageshow(self):
        h=cv2.imread("/home/bisag/MASK/HHTImask/HHTI_MASK_YOLO/1.png")
        cv2.imshow("image",h)
        cv2.waitKey()
        cv2.destroyAllWindows()



    
    def detection(self):


        global  ix,iy,sx,sy
        global new_pol
        global mask_vid

        ix,iy,sx,sy = -1,-1,-1,-1
        new_pol = 00
        mask_vid = 00
        pts = []

        # Model
        model_path = r"/home/bisag/MASK/HHTImask/HHTI_MASK_YOLO/weights/best.pt"  #custom model path
        video_path = r"/home/bisag/MASK/HHTImask/HHTI_MASK_YOLO/D8dog1.avi"  #input video path
        cpu_or_cuda = "cpu"  #choose device; "cpu" or "cuda"(if cuda is available)
        device = torch.device(cpu_or_cuda)
        model = torch.hub.load('ultralytics/yolov5', 'custom', path= model_path, force_reload=False)
        model = model.to(device)
        frame = cv2.VideoCapture(video_path)

        frame_width = int(frame.get(3))
        frame_height = int(frame.get(4))
        size = (frame_width, frame_height)
        # writer = cv2.VideoWriter('hhh.mp4',-1,8,size)

        text_font = cv2.FONT_HERSHEY_PLAIN
        color= (0,0,255)
        text_font_scale = 1.25
        prev_frame_time = 0
        new_frame_time = 0

        def draw_lines(event, x, y, flags, param):
            global ix,iy,sx,sy,mask_vid,new_pol
            # if the left mouse button was clicked, record the starting
        
            if event == cv2.EVENT_LBUTTONDOWN:
                if new_pol == 11:
                    pts.clear()
                    print('new polygon >>>>>>>>>>>>>>>>>>>>>>>>>>')
                    ix = -1
                    new_pol = 00            
                # draw circle of 2px
                cv2.circle(im, (x, y), 3, (0, 0, 127), -1)
                pts.append((x,y))
                # print(pts)
                if ix != -1: # if ix and iy are not first points, then draw a line
                    cv2.line(im, (ix, iy), (x, y), (0, 0, 127), 2, cv2.LINE_AA)
                else: # if ix and iy are first points, store as starting points
                    sx, sy = x, y
                ix,iy = x, y
            elif event == cv2.EVENT_RBUTTONDOWN:
                print('>>>>>>>>>>>>>>>>>>>>>>>>>>++--------------->>>>>>')
                if mask_vid == 00 :
                    mask_vid = 11
                else:
                    mask_vid = 00         
            elif event == cv2.EVENT_MBUTTONDOWN:
                # if flags == 33: # if alt key is pressed, create line between start and end points to create polygon
                cv2.line(im, (ix, iy), (x, y), (0, 0, 127), 2, cv2.LINE_AA)
                cv2.line(im, (x, y), (sx, sy), (0, 0, 127), 2, cv2.LINE_AA)
                pts.append((x,y))
                cv2.fillPoly(im, np.array([pts]), (255, 255, 255))        
                # mask_vid = 11
                ix, iy = -1, -1 # reset ix and iy
                new_pol = 11
                return mask_vid

        # Inference Loop
        # read image from path and add callback
        im = cv2.imread('/home/bisag/MASK/HHTImask/HHTI_MASK_YOLO/122.png')
        im = cv2.resize(im, dsize=(1280, 720))
        cv2.namedWindow("OpenCV")
        x, y = 0, 0

        cv2.createTrackbar('val', 'OpenCV', 30, 300, nothing)
        cv2.createTrackbar('HMax', 'OpenCV', 0, 180, nothing)
        cv2.createTrackbar('SMax', 'OpenCV', 0, 255,nothing)
            

        while True:
            ret, image = frame.read()
            if ret:
                # mask = np.zeros(image.shape, dtype=np.uint8)
                image = cv2.resize(image, dsize=(1280, 720)) 
                cv2.setMouseCallback('OpenCV',draw_lines) 
                if mask_vid == 11:            
                    image = cv2.bitwise_and(image, im)       
                else:
                    image = cv2.bitwise_xor(image, im) 

                hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HLS)

                hsv = np.array(hsv, dtype=np.float64)

                val = cv2.getTrackbarPos('val', 'OpenCV')
                SMax = cv2.getTrackbarPos('HMax', 'OpenCV')
                VMax = cv2.getTrackbarPos('SMax', 'OpenCV')
                
                val = val/30

                hsv[:, :, 1] = hsv[:, :, 1] * val
                hsv[:, :, 1][hsv[:, :, 1] > 255] = 255
            
                hsv[:, :, 2] = hsv[:, :, 2] * val
                hsv[:, :, 2][hsv[:, :, 2] > 255] = 255 

                hsv[:, :, 0] = hsv[:, :, 0] + SMax
                hsv[:, :, 0][hsv[:, :, 0] > 255] = 255
                hsv[:, :, 2] = hsv[:, :, 2] + VMax
                hsv[:, :, 2][hsv[:, :, 2] > 255] = 255
                hsv = np.array(hsv, dtype=np.uint8)
                image = cv2.cvtColor(hsv, cv2.COLOR_HLS2BGR)
                output = model(image)
                df = output.pandas().xyxy[0]
                animal = 0
                person = 0
                for index, row in df.iterrows():
                    a = row['name']
                    if a == 'animal':
                        # print('found')
                        animal = animal + 1
                    elif a == 'person':
                        # print('found')
                        person = person + 1
                    else:
                        print('---')
                print('animal : '+ str(animal))
                print('person : '+ str(person))
                result = np.array(output.pandas().xyxy[0])
                for i in result:
                    # print(i)
                    if i[-1] == 'person':
                        p1 = (int(i[0]),int(i[1]))
                        p2 = (int(i[2]),int(i[3]))
                        text_origin = (int(i[0]),int(i[1])-5)
                        #print(p1,p2)
                        cv2.rectangle(image,p1,p2,color=color,thickness=2)  #drawing bounding boxes
                        cv2.putText(image,text=f"{i[-1]} {i[-3]:.2f}",org=text_origin,
                                    fontFace=text_font,fontScale=text_font_scale,
                                    color=color,thickness=2)  #class and confidence text

                new_frame_time = time.time()

                fps = 1/(new_frame_time-prev_frame_time)
                prev_frame_time = new_frame_time
                fps = int(fps)
                fps = str(fps)
                # cv2.putText(image, fps, (7, 70), text_font, 3, (100, 255, 0), 3, cv2.LINE_AA)
                cv2.putText(image,'Person : '+str(person),(7, 70),text_font, 3, (100, 255, 0), 3, cv2.LINE_AA)
                # writer.write(image)
                cv2.imshow("OpenCV",image)

            else:
                break
            if waitKey(1) & 0xFF == ord('q'):
                break
        frame.release()
        cv2.destroyAllWindows()



    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "show imamge"))
        self.pushButton_2.setText(_translate("MainWindow", "play video"))
        self.pushButton_3.setText(_translate("MainWindow", "d play video"))
 

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
